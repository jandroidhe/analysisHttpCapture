class HttpObjectUtil
!!!315522.java!!!	replaceTextHttpEntityBody(inout message : FullHttpMessage, in newContents : String) : void
        // get the content type for this message so we can encode the newContents into a byte stream appropriately
        String contentTypeHeader = message.headers().get(HttpHeaders.Names.CONTENT_TYPE);

        Charset messageCharset;
        try {
            messageCharset = BrowserMobHttpUtil.readCharsetInContentTypeHeader(contentTypeHeader);
        } catch (UnsupportedCharsetException e) {
            java.nio.charset.UnsupportedCharsetException cause = e.getUnsupportedCharsetExceptionCause() ;
            log.error("Found unsupported character set in Content-Type header '{}' while attempting to replace contents of HTTP message.", contentTypeHeader, cause);

            throw cause;
        }

        if (messageCharset == null) {
            messageCharset = BrowserMobHttpUtil.DEFAULT_HTTP_CHARSET;
            log.warn("No character set declared in HTTP message. Replacing text using default charset {}.", messageCharset);
        }

        byte[] contentBytes = newContents.getBytes(messageCharset);

        replaceBinaryHttpEntityBody(message, contentBytes);
!!!315650.java!!!	replaceTextHttpEntityBody(inout message : LastHttpContent, in newContents : String) : void
        // get the content type for this message so we can encode the newContents into a byte stream appropriately
        String contentTypeHeader = message.trailingHeaders().get(HttpHeaders.Names.CONTENT_TYPE);

        Charset messageCharset;
        try {
            messageCharset = BrowserMobHttpUtil.readCharsetInContentTypeHeader(contentTypeHeader);
        } catch (UnsupportedCharsetException e) {
            java.nio.charset.UnsupportedCharsetException cause = e.getUnsupportedCharsetExceptionCause() ;
            log.error("Found unsupported character set in Content-Type header '{}' while attempting to replace contents of HTTP message.", contentTypeHeader, cause);

            throw cause;
        }

        if (messageCharset == null) {
            messageCharset = BrowserMobHttpUtil.DEFAULT_HTTP_CHARSET;
            log.warn("No character set declared in HTTP message. Replacing text using default charset {}.", messageCharset);
        }

        byte[] contentBytes = newContents.getBytes(messageCharset);

        replaceBinaryHttpEntityBody(message, contentBytes);
!!!315778.java!!!	replaceBinaryHttpEntityBody(inout message : FullHttpMessage, inout newBinaryContents : byte) : void
        message.content().resetWriterIndex();
        // resize the buffer if needed, since the new message may be longer than the old one
        message.content().ensureWritable(newBinaryContents.length, true);
        message.content().writeBytes(newBinaryContents);

        // update the Content-Length header, since the size may have changed
        message.headers().set(HttpHeaders.Names.CONTENT_LENGTH, newBinaryContents.length);
!!!315906.java!!!	replaceBinaryHttpEntityBody(inout message : LastHttpContent, inout newBinaryContents : byte) : void
//        message.content().capacity(newBinaryContents.length);
        message.content().clear();
        // resize the buffer if needed, since the new message may be longer than the old one
        message.content().ensureWritable(newBinaryContents.length, true);
        message.content().writeBytes(newBinaryContents);

        // update the Content-Length header, since the size may have changed
//        message.trailingHeaders().set(HttpHeaders.Names.CONTENT_LENGTH, newBinaryContents.length);
!!!316034.java!!!	extractHttpEntityBody(inout httpContent : HttpContent, inout charset : Charset) : String
        if (charset == null) {
            throw new IllegalArgumentException("No charset specified when extracting the contents of an HTTP message");
        }

        byte[] contentBytes = BrowserMobHttpUtil.extractReadableBytes(httpContent.content());

        return new String(contentBytes, charset);
!!!316162.java!!!	extractHttpEntityBody(inout httpMessage : FullHttpMessage) : String
        Charset charset;
        try {
            charset = getCharsetFromMessage(httpMessage);
        } catch (UnsupportedCharsetException e) {
            // the declared character set is not supported, so it is impossible to decode the contents of the message. log an error and throw an exception
            // to alert the client code.
            java.nio.charset.UnsupportedCharsetException cause = e.getUnsupportedCharsetExceptionCause();

            String contentTypeHeader = HttpHeaders.getHeader(httpMessage, HttpHeaders.Names.CONTENT_TYPE);
            log.error("Cannot retrieve text contents of message because HTTP message declares a character set that is not supported on this platform. Content type header: {}.", contentTypeHeader, cause);

            throw cause;
        }

        return extractHttpEntityBody(httpMessage, charset);
!!!316290.java!!!	getCharsetFromMessage(inout httpMessage : HttpMessage) : Charset
        String contentTypeHeader = HttpHeaders.getHeader(httpMessage, HttpHeaders.Names.CONTENT_TYPE);

        Charset charset = BrowserMobHttpUtil.readCharsetInContentTypeHeader(contentTypeHeader);
        if (charset == null) {
            return BrowserMobHttpUtil.DEFAULT_HTTP_CHARSET;
        }

        return charset;
!!!316418.java!!!	extractBinaryHttpEntityBody(inout httpContent : HttpContent) : byte
        return BrowserMobHttpUtil.extractReadableBytes(httpContent.content());
