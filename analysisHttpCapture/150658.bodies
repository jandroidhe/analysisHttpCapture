class BrowserMobHttpFilterChain
!!!254722.java!!!	BrowserMobHttpFilterChain(inout proxyServer : BrowserMobProxyServer, inout originalRequest : HttpRequest, inout ctx : ChannelHandlerContext)
        super(originalRequest, ctx);

        this.proxyServer = proxyServer;

        if (proxyServer.getFilterFactories() != null) {
            filters = new ArrayList<>(proxyServer.getFilterFactories().size());

            // instantiate all HttpFilters using the proxy's filter factories
            for (HttpFiltersSource filterFactory : proxyServer.getFilterFactories()) {
                HttpFilters filter = filterFactory.filterRequest(originalRequest, ctx);
                // allow filter factories to avoid adding a filter on a per-request basis by returning a null
                // HttpFilters instance
                if (filter != null) {
                    filters.add(filter);
                }
            }
        } else {
            filters = Collections.emptyList();
        }
!!!254850.java!!!	clientToProxyRequest(inout httpObject : HttpObject) : HttpResponse
        if (proxyServer.isStopped()) {
            log.warn("Aborting request to {} because proxy is stopped", originalRequest.getUri());
            HttpResponse abortedResponse = new DefaultFullHttpResponse(originalRequest.getProtocolVersion(), HttpResponseStatus.SERVICE_UNAVAILABLE);
            HttpHeaders.setContentLength(abortedResponse, 0L);
            return abortedResponse;
        }

        for (HttpFilters filter : filters) {
            try {
                HttpResponse filterResponse = filter.clientToProxyRequest(httpObject);
                if (filterResponse != null) {
                    // if we are short-circuiting the response to an HttpRequest, update ModifiedRequestAwareFilter instances
                    // with this (possibly) modified HttpRequest before returning the short-circuit response
                    if (httpObject instanceof HttpRequest) {
                        updateFiltersWithModifiedResponse((HttpRequest) httpObject);
                    }

                    return filterResponse;
                }
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        // if this httpObject is the HTTP request, set the modified request object on all ModifiedRequestAwareFilter
        // instances, so they have access to all modifications the request filters made while filtering
        if (httpObject instanceof HttpRequest) {
            updateFiltersWithModifiedResponse((HttpRequest) httpObject);
        }

        return null;
!!!254978.java!!!	proxyToServerRequest(inout httpObject : HttpObject) : HttpResponse
        for (HttpFilters filter : filters) {
            try {
                HttpResponse filterResponse = filter.proxyToServerRequest(httpObject);
                if (filterResponse != null) {
                    return filterResponse;
                }
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        return null;
!!!255106.java!!!	proxyToServerRequestSending() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerRequestSending();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!255234.java!!!	serverToProxyResponse(inout httpObject : HttpObject) : HttpObject
        HttpObject processedHttpObject = httpObject;

        for (HttpFilters filter : filters) {
            try {
                processedHttpObject = filter.serverToProxyResponse(processedHttpObject);
                if (processedHttpObject == null) {
                    return null;
                }
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        return processedHttpObject;
!!!255362.java!!!	serverToProxyResponseTimedOut() : void
        for (HttpFilters filter : filters) {
            try {
                filter.serverToProxyResponseTimedOut();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!255490.java!!!	serverToProxyResponseReceiving() : void
        for (HttpFilters filter : filters) {
            try {
                filter.serverToProxyResponseReceiving();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!255618.java!!!	proxyToServerResolutionStarted(in resolvingServerHostAndPort : String) : InetSocketAddress
        InetSocketAddress overrideAddress = null;
        String newServerHostAndPort = resolvingServerHostAndPort;

        for (HttpFilters filter : filters) {
            try {
                InetSocketAddress filterResult = filter.proxyToServerResolutionStarted(newServerHostAndPort);
                if (filterResult != null) {
                    overrideAddress = filterResult;
                    newServerHostAndPort = filterResult.getHostString() + ":" + filterResult.getPort();
                }
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        return overrideAddress;
!!!255746.java!!!	proxyToServerResolutionFailed(in hostAndPort : String) : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerResolutionFailed(hostAndPort);
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!255874.java!!!	proxyToServerResolutionSucceeded(in serverHostAndPort : String, inout resolvedRemoteAddress : InetSocketAddress) : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerResolutionSucceeded(serverHostAndPort, resolvedRemoteAddress);
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        super.proxyToServerResolutionSucceeded(serverHostAndPort, resolvedRemoteAddress);
!!!256002.java!!!	proxyToServerConnectionStarted() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerConnectionStarted();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256130.java!!!	proxyToServerConnectionSSLHandshakeStarted() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerConnectionSSLHandshakeStarted();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256258.java!!!	proxyToServerConnectionFailed() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerConnectionFailed();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256386.java!!!	proxyToServerConnectionSucceeded(inout serverCtx : ChannelHandlerContext) : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerConnectionSucceeded(serverCtx);
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256514.java!!!	proxyToServerRequestSent() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerRequestSent();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256642.java!!!	serverToProxyResponseReceived() : void
        for (HttpFilters filter : filters) {
            try {
                filter.serverToProxyResponseReceived();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!256770.java!!!	proxyToClientResponse(inout httpObject : HttpObject) : HttpObject
        HttpObject processedHttpObject = httpObject;
        for (HttpFilters filter : filters) {
            try {
                processedHttpObject = filter.proxyToClientResponse(processedHttpObject);
                if (processedHttpObject == null) {
                    return null;
                }
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }

        return processedHttpObject;
!!!256898.java!!!	proxyToServerConnectionQueued() : void
        for (HttpFilters filter : filters) {
            try {
                filter.proxyToServerConnectionQueued();
            } catch (RuntimeException e) {
                log.warn("Filter in filter chain threw exception. Filter method may have been aborted.", e);
            }
        }
!!!257026.java!!!	updateFiltersWithModifiedResponse(inout modifiedRequest : HttpRequest) : void
        for (HttpFilters filter : filters) {
            if (filter instanceof ModifiedRequestAwareFilter) {
                ModifiedRequestAwareFilter requestCaptureFilter = (ModifiedRequestAwareFilter) filter;
                try {
                    requestCaptureFilter.setModifiedHttpRequest(modifiedRequest);
                } catch (RuntimeException e) {
                    log.warn("ModifiedRequestAwareFilter in filter chain threw exception while setting modified HTTP request.", e);
                }
            }
        }
