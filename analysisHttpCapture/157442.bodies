class DefaultSecurityProviderTool
!!!294402.java!!!	createCARootCertificate(inout certificateInfo : CertificateInfo, inout keyPair : KeyPair, in messageDigest : String) : CertificateAndKey
        return bouncyCastle.createCARootCertificate(certificateInfo, keyPair, messageDigest);
!!!294530.java!!!	createServerCertificate(inout certificateInfo : CertificateInfo, inout caRootCertificate : X509Certificate, inout caPrivateKey : PrivateKey, inout serverKeyPair : KeyPair, in messageDigest : String) : CertificateAndKey
        return bouncyCastle.createServerCertificate(certificateInfo, caRootCertificate, caPrivateKey, serverKeyPair, messageDigest);
!!!294658.java!!!	createServerKeyStore(in keyStoreType : String, inout serverCertificateAndKey : CertificateAndKey, inout rootCertificate : X509Certificate, in privateKeyAlias : String, in password : String) : KeyStore
        if (password == null) {
            throw new IllegalArgumentException("KeyStore password cannot be null");
        }

        if (privateKeyAlias == null) {
            throw new IllegalArgumentException("Private key alias cannot be null");
        }

        // create a KeyStore containing the impersonated certificate's private key and a certificate chain with the
        // impersonated cert and our root certificate
        KeyStore impersonatedCertificateKeyStore = KeyStoreUtil.createEmptyKeyStore(keyStoreType, null);

        // create the certificate chain back for the impersonated certificate back to the root certificate
        Certificate[] chain = {serverCertificateAndKey.getCertificate(), rootCertificate};

        try {
            // place the impersonated certificate and its private key in the KeyStore
            impersonatedCertificateKeyStore.setKeyEntry(privateKeyAlias, serverCertificateAndKey.getPrivateKey(), password.toCharArray(), chain);
        } catch (KeyStoreException e) {
            throw new KeyStoreAccessException("Error storing impersonated certificate and private key in KeyStore", e);
        }

        return impersonatedCertificateKeyStore;
!!!294786.java!!!	createRootCertificateKeyStore(in keyStoreType : String, inout rootCertificateAndKey : CertificateAndKey, in privateKeyAlias : String, in password : String) : KeyStore
        return KeyStoreUtil.createRootCertificateKeyStore(keyStoreType, rootCertificateAndKey.getCertificate(), privateKeyAlias, rootCertificateAndKey.getPrivateKey(), password, null);
!!!294914.java!!!	encodePrivateKeyAsPem(inout privateKey : PrivateKey, in passwordForPrivateKey : String, in encryptionAlgorithm : String) : String
        return bouncyCastle.encodePrivateKeyAsPem(privateKey, passwordForPrivateKey, encryptionAlgorithm);
!!!295042.java!!!	encodeCertificateAsPem(inout certificate : Certificate) : String
        return bouncyCastle.encodeCertificateAsPem(certificate);
!!!295170.java!!!	decodePemEncodedPrivateKey(inout privateKeyReader : Reader, in password : String) : PrivateKey
        return bouncyCastle.decodePemEncodedPrivateKey(privateKeyReader, password);
!!!295298.java!!!	decodePemEncodedCertificate(inout certificateReader : Reader) : X509Certificate
        // JCA supports reading PEM-encoded X509Certificates fairly easily, so there is no need to use BC to read the cert
        Certificate certificate;

        // the JCA CertificateFactory takes an InputStream, so convert the reader to a stream first. converting to a String first
        // is not ideal, but is relatively straightforward. (PEM certificates should only contain US_ASCII-compatible characters.)
        try (InputStream certificateAsStream = new ByteArrayInputStream(CharStreams.toString(certificateReader).getBytes(StandardCharsets.US_ASCII))) {
            CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
            certificate = certificateFactory.generateCertificate(certificateAsStream);
        } catch (CertificateException | IOException e) {
            throw new ImportException("Unable to read PEM-encoded X509Certificate", e);
        }

        if (!(certificate instanceof X509Certificate)) {
            throw new ImportException("Attempted to import non-X.509 certificate as X.509 certificate");
        }

        return (X509Certificate) certificate;
!!!295426.java!!!	loadKeyStore(inout file : File, in keyStoreType : String, in password : String) : KeyStore
        KeyStore keyStore;
        try {
            keyStore = KeyStore.getInstance(keyStoreType);
        } catch (KeyStoreException e) {
            throw new KeyStoreAccessException("Unable to get KeyStore instance of type: " + keyStoreType, e);
        }

        try (InputStream keystoreAsStream = new FileInputStream(file)) {
            keyStore.load(keystoreAsStream, password.toCharArray());
        } catch (IOException e) {
            throw new ImportException("Unable to read KeyStore from file: " + file.getName(), e);
        } catch (CertificateException | NoSuchAlgorithmException e) {
            throw new ImportException("Error while reading KeyStore", e);
        }

        return keyStore;
!!!295554.java!!!	saveKeyStore(inout file : File, inout keyStore : KeyStore, in keystorePassword : String) : void
        try (FileOutputStream fos = new FileOutputStream(file)) {
            keyStore.store(fos, keystorePassword.toCharArray());
        } catch (CertificateException | NoSuchAlgorithmException | IOException | KeyStoreException e) {
            throw new KeyStoreAccessException("Unable to save KeyStore to file: " + file.getName(), e);
        }
!!!295682.java!!!	getKeyManagers(inout keyStore : KeyStore, in keyStorePassword : String) : KeyManager
        return KeyStoreUtil.getKeyManagers(keyStore, keyStorePassword, null, null);
