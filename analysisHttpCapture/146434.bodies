class BrowserMobProxyServer
!!!211842.java!!!	start(in port : int, inout clientBindAddress : InetAddress, inout serverBindAddress : InetAddress) : void
        boolean notStarted = started.compareAndSet(false, true);
        if (!notStarted) {
            throw new IllegalStateException("Proxy server is already started. Not restarting.");
        }

        InetSocketAddress clientBindSocket;
        if (clientBindAddress == null) {
            // if no client bind address was specified, bind to the wildcard address
            clientBindSocket = new InetSocketAddress(port);
        } else {
            clientBindSocket = new InetSocketAddress(clientBindAddress, port);
        }

        this.serverBindAddress = serverBindAddress;

        // initialize all the default BrowserMob filter factories that provide core BMP functionality
        addBrowserMobFilters();

        HttpProxyServerBootstrap bootstrap = DefaultHttpProxyServer.bootstrap()
                .withFiltersSource(new HttpFiltersSource() {
                    @Override
                    public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext channelHandlerContext) {
                        return new BrowserMobHttpFilterChain(BrowserMobProxyServer.this, originalRequest, channelHandlerContext);
                    }

                    @Override
                    public int getMaximumRequestBufferSizeInBytes() {
                        return getMaximumRequestBufferSize();
                    }

                    @Override
                    public int getMaximumResponseBufferSizeInBytes() {
                        return getMaximumResponseBufferSize();
                    }
                })
                .withServerResolver(delegatingResolver)
                .withAddress(clientBindSocket)
                .withConnectTimeout(connectTimeoutMs)
                .withIdleConnectionTimeout(idleConnectionTimeoutSec)
                .withProxyAlias(VIA_HEADER_ALIAS);

        if (serverBindAddress != null) {
            bootstrap.withNetworkInterface(new InetSocketAddress(serverBindAddress, 0));
        }


        if (!mitmDisabled) {
//            if (mitmManager == null) {
//                mitmManager = ImpersonatingMitmManager.builder()
//                        .rootCertificateSource(new KeyStoreFileCertificateSource(
//                                KEYSTORE_TYPE,
//                                useEcc ? EC_KEYSTORE_RESOURCE : RSA_KEYSTORE_RESOURCE,
//                                KEYSTORE_PRIVATE_KEY_ALIAS,
//                                KEYSTORE_PASSWORD))
//                        .serverKeyGenerator(useEcc ? new ECKeyGenerator() : new RSAKeyGenerator())
//                        .trustSource(trustSource)
//                        .build();
//            }

            try {
                bootstrap.withManInTheMiddle(new CertificateSniffingMitmManager(
                        new Authority()));
            }catch (Exception e){
                e.printStackTrace();
            }
        }

        if (readBandwidthLimitBps > 0 || writeBandwidthLimitBps > 0) {
            bootstrap.withThrottling(readBandwidthLimitBps, writeBandwidthLimitBps);
        }

        if (chainedProxyManager != null) {
            bootstrap.withChainProxyManager(chainedProxyManager);
        } else if (upstreamProxyAddress != null) {
            // indicate that the proxy was bootstrapped with the default chained proxy manager, which allows changing the
            // chained proxy after the proxy is started.
            bootstrappedWithDefaultChainedProxy.set(true);

            bootstrap.withChainProxyManager(new ChainedProxyManager() {
                @Override
                public void lookupChainedProxies(HttpRequest httpRequest, Queue<ChainedProxy> chainedProxies) {
                    final InetSocketAddress upstreamProxy = upstreamProxyAddress;
                    if (upstreamProxy != null) {
                        chainedProxies.add(new ChainedProxyAdapter() {
                            @Override
                            public InetSocketAddress getChainedProxyAddress() {
                                return upstreamProxy;
                            }

                            @Override
                            public void filterRequest(HttpObject httpObject) {
                                String chainedProxyAuth = chainedProxyCredentials;
                                if (chainedProxyAuth != null) {
                                    if (httpObject instanceof HttpRequest) {
                                        HttpHeaders.addHeader((HttpRequest)httpObject, HttpHeaders.Names.PROXY_AUTHORIZATION, "Basic " + chainedProxyAuth);
                                    }
                                }
                            }
                        });
                    }
                }
            });
        }

        if (threadPoolConfiguration != null) {
            bootstrap.withThreadPoolConfiguration(threadPoolConfiguration);
        }

        proxyServer = bootstrap.start();
!!!211970.java!!!	isStarted() : boolean
        return started.get();
!!!212098.java!!!	start(in port : int) : void
        this.start(port, null, null);
!!!212226.java!!!	start(in port : int, inout bindAddress : InetAddress) : void
        this.start(port, bindAddress, null);

!!!212354.java!!!	start() : void
        this.start(0);
!!!212482.java!!!	stop() : void
        stop(true);
!!!212610.java!!!	abort() : void
        stop(false);
!!!212738.java!!!	stop(inout graceful : boolean) : void
        if (isStarted()) {
            if (stopped.compareAndSet(false, true)) {
                if (proxyServer != null) {
                    if (graceful) {
                        proxyServer.stop();
                    } else {
                        proxyServer.abort();
                    }
                } else {
                    log.warn("Attempted to stop proxy server, but proxy was never successfully started.");
                }
            } else {
                throw new IllegalStateException("Proxy server is already stopped. Cannot re-stop.");
            }
        } else {
            throw new IllegalStateException("Proxy server has not been started");
        }
!!!212866.java!!!	getClientBindAddress() : InetAddress
        if (started.get()) {
            return proxyServer.getListenAddress().getAddress();
        } else {
            return null;
        }
!!!212994.java!!!	getPort() : int
        if (started.get()) {
            return proxyServer.getListenAddress().getPort();
        } else {
            return 0;
        }
!!!213122.java!!!	getServerBindAddress() : InetAddress
        return serverBindAddress;
!!!213250.java!!!	getHar() : Har
        return har;
!!!213378.java!!!	getHar(inout pageRef : Set<String>) : Har
        return new PageRefFilteredHar(getHar(), pageRef);
!!!213506.java!!!	getHar(in pageRef : String) : Har
        return new PageRefFilteredHar(getHar(), pageRef);
!!!213634.java!!!	newHar() : Har
        return newHar(null);
!!!213762.java!!!	newHar(in initialPageRef : String) : Har
        return newHar(initialPageRef, null);
!!!213890.java!!!	newHar(in initialPageRef : String, in initialPageTitle : String) : Har
        Har oldHar = getHar();

        addHarCaptureFilter();

        harPageCount.set(0);

        this.har = new Har(new HarLog(HAR_CREATOR_VERSION,this));

        newPage(initialPageRef, initialPageTitle);

        return oldHar;
!!!214018.java!!!	setHarCaptureTypes(inout harCaptureSettings : Set<CaptureType>) : void
        if (harCaptureSettings == null || harCaptureSettings.isEmpty()) {
            harCaptureTypes = EnumSet.noneOf(CaptureType.class);
        } else {
            harCaptureTypes = EnumSet.copyOf(harCaptureSettings);
        }
!!!214146.java!!!	setHarCaptureTypes(inout  : CaptureType...captureTypes) : void
        if (captureTypes == null) {
            setHarCaptureTypes(EnumSet.noneOf(CaptureType.class));
        } else {
            setHarCaptureTypes(EnumSet.copyOf(Arrays.asList(captureTypes)));
        }
!!!214274.java!!!	getHarCaptureTypes() : CaptureType
        return EnumSet.copyOf(harCaptureTypes);
!!!214402.java!!!	enableHarCaptureTypes(inout captureTypes : Set<CaptureType>) : void
        harCaptureTypes.addAll(captureTypes);
!!!214530.java!!!	enableHarCaptureTypes(inout  : CaptureType...captureTypes) : void
        if (captureTypes == null) {
            enableHarCaptureTypes(EnumSet.noneOf(CaptureType.class));
        } else {
            enableHarCaptureTypes(EnumSet.copyOf(Arrays.asList(captureTypes)));
        }
!!!214658.java!!!	disableHarCaptureTypes(inout captureTypes : Set<CaptureType>) : void
        harCaptureTypes.removeAll(captureTypes);

!!!214786.java!!!	disableHarCaptureTypes(inout  : CaptureType...captureTypes) : void
        if (captureTypes == null) {
            disableHarCaptureTypes(EnumSet.noneOf(CaptureType.class));
        } else {
            disableHarCaptureTypes(EnumSet.copyOf(Arrays.asList(captureTypes)));
        }
!!!214914.java!!!	newPage() : Har
        return newPage(null);
!!!215042.java!!!	newPage(in pageRef : String) : Har
        return newPage(pageRef, null);
!!!215170.java!!!	newPage(in pageRef : String, in pageTitle : String) : Har
        if (har == null) {
            throw new IllegalStateException("No HAR exists for this proxy. Use newHar() to create a new HAR before calling newPage().");
        }

        Har endOfPageHar = null;

        if (currentHarPage != null) {
            String currentPageRef = currentHarPage.getId();

            // end the previous page, so that page-wide timings are populated
            endPage();

            // the interface requires newPage() to return the Har as it was immediately after the previous page was ended.
            endOfPageHar = BrowserMobProxyUtil.copyHarThroughPageRef(har, currentPageRef);
        }

        if (pageRef == null) {
            pageRef = "Page " + harPageCount.getAndIncrement();
        }

        if (pageTitle == null) {
            pageTitle = pageRef;
        }

        HarPage newPage = new HarPage(pageRef, pageTitle);
        har.getLog().addPage(newPage);

        currentHarPage = newPage;

        return endOfPageHar;
!!!215298.java!!!	endHar() : Har
        Har oldHar = getHar();

        // end the page and populate timings
        endPage();

        this.har = null;

        return oldHar;
!!!215426.java!!!	setReadBandwidthLimit(in bytesPerSecond : long) : void
        this.readBandwidthLimitBps = bytesPerSecond;

        if (isStarted()) {
            proxyServer.setThrottle(this.readBandwidthLimitBps, this.writeBandwidthLimitBps);
        }
!!!215554.java!!!	getReadBandwidthLimit() : long
        return readBandwidthLimitBps;
!!!215682.java!!!	setWriteBandwidthLimit(in bytesPerSecond : long) : void
        this.writeBandwidthLimitBps = bytesPerSecond;

        if (isStarted()) {
            proxyServer.setThrottle(this.readBandwidthLimitBps, this.writeBandwidthLimitBps);
        }
!!!215810.java!!!	getWriteBandwidthLimit() : long
        return writeBandwidthLimitBps;
!!!215938.java!!!	endPage() : void
        if (har == null) {
            throw new IllegalStateException("No HAR exists for this proxy. Use newHar() to create a new HAR.");
        }

        HarPage previousPage = this.currentHarPage;
        this.currentHarPage = null;

        if (previousPage == null) {
            return;
        }

        previousPage.getPageTimings().setOnLoad(new Date().getTime() - previousPage.getStartedDateTime().getTime());
!!!216066.java!!!	addHeaders(inout headers : Map<String, String>) : void
        ConcurrentMap<String, String> newHeaders = new MapMaker().concurrencyLevel(1).makeMap();
        newHeaders.putAll(headers);

        this.additionalHeaders = newHeaders;
!!!216194.java!!!	setLatency(in latency : long, inout timeUnit : TimeUnit) : void
        this.latencyMs = (int) TimeUnit.MILLISECONDS.convert(latency, timeUnit);
!!!216322.java!!!	autoAuthorization(in domain : String, in username : String, in password : String, inout authType : AuthType) : void
        switch (authType) {
            case BASIC:
                // base64 encode the "username:password" string
                String base64EncodedCredentials = BrowserMobHttpUtil.base64EncodeBasicCredentials(username, password);

                basicAuthCredentials.put(domain, base64EncodedCredentials);
                break;

            default:
                throw new UnsupportedOperationException("AuthType " + authType + " is not supported for HTTP Authorization");
        }
!!!216450.java!!!	stopAutoAuthorization(in domain : String) : void
        basicAuthCredentials.remove(domain);
!!!216578.java!!!	chainedProxyAuthorization(in username : String, in password : String, inout authType : AuthType) : void
        switch (authType) {
            case BASIC:
                chainedProxyCredentials = BrowserMobHttpUtil.base64EncodeBasicCredentials(username, password);
                break;

            default:
                throw new UnsupportedOperationException("AuthType " + authType + " is not supported for Proxy Authorization");
        }
!!!216706.java!!!	setConnectTimeout(in connectTimeout : int, inout timeUnit : TimeUnit) : void
        this.connectTimeoutMs = (int) TimeUnit.MILLISECONDS.convert(connectTimeout, timeUnit);

        if (isStarted()) {
            proxyServer.setConnectTimeout((int) TimeUnit.MILLISECONDS.convert(connectTimeout, timeUnit));
        }
!!!216834.java!!!	setIdleConnectionTimeout(in idleConnectionTimeout : int, inout timeUnit : TimeUnit) : void
        long timeout = TimeUnit.SECONDS.convert(idleConnectionTimeout, timeUnit);
        if (timeout == 0 && idleConnectionTimeout > 0) {
            this.idleConnectionTimeoutSec = 1;
        } else {
            this.idleConnectionTimeoutSec = (int) timeout;
        }

        if (isStarted()) {
            proxyServer.setIdleConnectionTimeout(idleConnectionTimeoutSec);
        }
!!!216962.java!!!	setRequestTimeout(in requestTimeout : int, inout timeUnit : TimeUnit) : void
        //TODO: implement Request Timeouts using LittleProxy. currently this only sets an idle connection timeout, if the idle connection
        // timeout is higher than the specified requestTimeout.
        if (idleConnectionTimeoutSec == 0 || idleConnectionTimeoutSec > TimeUnit.SECONDS.convert(requestTimeout, timeUnit)) {
            setIdleConnectionTimeout(requestTimeout, timeUnit);
        }
!!!217090.java!!!	rewriteUrl(in pattern : String, in replace : String) : void
        rewriteRules.add(new RewriteRule(pattern, replace));
!!!217218.java!!!	rewriteUrls(inout rewriteRules : Map<String, String>) : void
        List<RewriteRule> newRules = new ArrayList<>(rewriteRules.size());
        for (Map.Entry<String, String> rewriteRule : rewriteRules.entrySet()) {
            RewriteRule newRule = new RewriteRule(rewriteRule.getKey(), rewriteRule.getValue());
            newRules.add(newRule);
        }

        this.rewriteRules = new CopyOnWriteArrayList<>(newRules);
!!!217346.java!!!	clearRewriteRules() : void
        rewriteRules.clear();
!!!217474.java!!!	blacklistRequests(in pattern : String, in responseCode : int) : void
        blacklistEntries.add(new BlacklistEntry(pattern, responseCode));
!!!217602.java!!!	blacklistRequests(in pattern : String, in responseCode : int, in method : String) : void
        blacklistEntries.add(new BlacklistEntry(pattern, responseCode, method));
!!!217730.java!!!	setBlacklist(inout blacklist : Collection<BlacklistEntry>) : void
        this.blacklistEntries = new CopyOnWriteArrayList<>(blacklist);
!!!217858.java!!!	getBlacklist() : BlacklistEntry
        return Collections.unmodifiableCollection(blacklistEntries);
!!!217986.java!!!	isWhitelistEnabled() : boolean
        return whitelist.get().isEnabled();
!!!218114.java!!!	getWhitelistUrls() : Collection<String>
        ImmutableList.Builder<String> builder = ImmutableList.builder();
        for (Pattern pattern : whitelist.get().getPatterns()) {
            builder.add(pattern.pattern());
        }

        return builder.build();
!!!218242.java!!!	getWhitelistStatusCode() : int
        return whitelist.get().getStatusCode();
!!!218370.java!!!	clearBlacklist() : void
        blacklistEntries.clear();
!!!218498.java!!!	whitelistRequests(inout urlPatterns : Collection<String>, in statusCode : int) : void
        this.whitelist.set(new Whitelist(urlPatterns, statusCode));
!!!218626.java!!!	addWhitelistPattern(in urlPattern : String) : void
        // to make sure this method is threadsafe, we need to guarantee that the "snapshot" of the whitelist taken at the beginning
        // of the method has not been replaced by the time we have constructed a new whitelist at the end of the method
        boolean whitelistUpdated = false;
        while (!whitelistUpdated) {
            Whitelist currentWhitelist = this.whitelist.get();
            if (!currentWhitelist.isEnabled()) {
                throw new IllegalStateException("Whitelist is disabled. Cannot add patterns to a disabled whitelist.");
            }

            // retrieve the response code and list of patterns from the current whitelist, the construct a new list of patterns that contains
            // all of the old whitelist's patterns + this new pattern
            int statusCode = currentWhitelist.getStatusCode();
            List<String> newPatterns = new ArrayList<>(currentWhitelist.getPatterns().size() + 1);
            for (Pattern pattern : currentWhitelist.getPatterns()) {
                newPatterns.add(pattern.pattern());
            }
            newPatterns.add(urlPattern);

            // create a new (immutable) Whitelist object with the new pattern list and status code
            Whitelist newWhitelist = new Whitelist(newPatterns, statusCode);

            // replace the current whitelist with the new whitelist only if the current whitelist has not changed since we started
            whitelistUpdated = this.whitelist.compareAndSet(currentWhitelist, newWhitelist);
        }
!!!218754.java!!!	whitelistRequests(inout patterns : String, in responseCode : int) : void
        if (patterns == null || patterns.length == 0) {
            this.enableEmptyWhitelist(responseCode);
        } else {
            this.whitelistRequests(Arrays.asList(patterns), responseCode);
        }
!!!218882.java!!!	enableEmptyWhitelist(in statusCode : int) : void
        whitelist.set(new Whitelist(statusCode));
!!!219010.java!!!	disableWhitelist() : void
        whitelist.set(Whitelist.WHITELIST_DISABLED);
!!!219138.java!!!	addHeader(in name : String, in value : String) : void
        additionalHeaders.put(name, value);
!!!219266.java!!!	removeHeader(in name : String) : void
        additionalHeaders.remove(name);
!!!219394.java!!!	removeAllHeaders() : void
        additionalHeaders.clear();
!!!219522.java!!!	getAllHeaders() : Map<String, String>
        return ImmutableMap.copyOf(additionalHeaders);
!!!219650.java!!!	setHostNameResolver(inout resolver : AdvancedHostResolver) : void
        delegatingResolver.setResolver(resolver);
!!!219778.java!!!	getHostNameResolver() : AdvancedHostResolver
        return delegatingResolver.getResolver();
!!!219906.java!!!	waitForQuiescence(in quietPeriod : long, in timeout : long, inout timeUnit : TimeUnit) : boolean
        return activityMonitor.waitForQuiescence(quietPeriod, timeout, timeUnit);
!!!220034.java!!!	setChainedProxy(inout chainedProxyAddress : InetSocketAddress) : void
        if (isStarted() && !bootstrappedWithDefaultChainedProxy.get()) {
            throw new IllegalStateException("Cannot set a chained proxy after the proxy is started if the proxy was started without a chained proxy.");
        }

        upstreamProxyAddress = chainedProxyAddress;
!!!220162.java!!!	getChainedProxy() : InetSocketAddress
        return upstreamProxyAddress;
!!!220290.java!!!	setChainedProxyManager(inout chainedProxyManager : ChainedProxyManager) : void
        if (isStarted()) {
            throw new IllegalStateException("Cannot configure chained proxy manager after proxy has started.");
        }

        this.chainedProxyManager = chainedProxyManager;
!!!220418.java!!!	setThreadPoolConfiguration(inout threadPoolConfiguration : ThreadPoolConfiguration) : void
        if (isStarted()) {
            throw new IllegalStateException("Cannot configure thread pool after proxy has started.");
        }

        this.threadPoolConfiguration = threadPoolConfiguration;
!!!220546.java!!!	addFirstHttpFilterFactory(inout filterFactory : HttpFiltersSource) : void
        filterFactories.add(0, filterFactory);
!!!220674.java!!!	addLastHttpFilterFactory(inout filterFactory : HttpFiltersSource) : void
        filterFactories.add(filterFactory);
!!!220802.java!!!	addResponseFilter(inout filter : ResponseFilter) : void
        filterFactories.add(new ResponseFilterAdapter.FilterSource(filter));
//        addLastHttpFilterFactory();
!!!220930.java!!!	addRequestFilter(inout filter : RequestFilter) : void
        addFirstHttpFilterFactory(new RequestFilterAdapter.FilterSource(filter));
!!!221058.java!!!	getRewriteRules() : Map<String, String>
        ImmutableMap.Builder<String, String> builder = ImmutableMap.builder();
        for (RewriteRule rewriteRule : rewriteRules) {
            builder.put(rewriteRule.getPattern().pattern(), rewriteRule.getReplace());
        }

        return builder.build();
!!!221186.java!!!	removeRewriteRule(in urlPattern : String) : void
        // normally removing elements from the list we are iterating over would not be possible, but since this is a CopyOnWriteArrayList
        // the iterator it returns is a "snapshot" of the list that will not be affected by removal (and that does not support removal, either)
        for (RewriteRule rewriteRule : rewriteRules) {
            if (rewriteRule.getPattern().pattern().equals(urlPattern)) {
                rewriteRules.remove(rewriteRule);
            }
        }
!!!221314.java!!!	isStopped() : boolean
        return stopped.get();
!!!221442.java!!!	getCurrentHarPage() : HarPage
        return currentHarPage;
!!!221570.java!!!	addHttpFilterFactory(inout filterFactory : HttpFiltersSource) : void
        filterFactories.add(filterFactory);
!!!221698.java!!!	getFilterFactories() : List<HttpFiltersSource>
        return filterFactories;
!!!221826.java!!!	setMitmDisabled(inout mitmDisabled : boolean) : void
        if (isStarted()) {
            throw new IllegalStateException("Cannot disable MITM after the proxy has been started");
        }

        this.mitmDisabled = mitmDisabled;
!!!221954.java!!!	setMitmManager(inout mitmManager : MitmManager) : void
        this.mitmManager = mitmManager;
!!!222082.java!!!	setTrustAllServers(inout trustAllServers : boolean) : void
        if (isStarted()) {
            throw new IllegalStateException("Cannot disable upstream server verification after the proxy has been started");
        }

        if (trustAllServers) {
            trustSource = null;
        } else {
            if (trustSource == null) {
                trustSource = TrustSource.defaultTrustSource();
            }
        }
!!!222210.java!!!	setTrustSource(inout trustSource : TrustSource) : void
        if (isStarted()) {
            throw new IllegalStateException("Cannot change TrustSource after proxy has been started");
        }

        this.trustSource = trustSource;
!!!222338.java!!!	isMitmDisabled() : boolean
        return this.mitmDisabled;
!!!222466.java!!!	setUseEcc(inout useEcc : boolean) : void
        this.useEcc = useEcc;
!!!222594.java!!!	addBrowserMobFilters() : void
        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new ResolvedHostnameCacheFilter(originalRequest, ctx);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new RegisterRequestFilter(originalRequest, ctx, activityMonitor);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new HttpsOriginalHostCaptureFilter(originalRequest, ctx);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new BlacklistFilter(originalRequest, ctx, getBlacklist());
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                Whitelist currentWhitelist = whitelist.get();
                return new WhitelistFilter(originalRequest, ctx, isWhitelistEnabled(), currentWhitelist.getStatusCode(), currentWhitelist.getPatterns());
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new AutoBasicAuthFilter(originalRequest, ctx, basicAuthCredentials);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new RewriteUrlFilter(originalRequest, ctx, rewriteRules);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new HttpsHostCaptureFilter(originalRequest, ctx);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest) {
                return new AddHeadersFilter(originalRequest, additionalHeaders);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest) {
                return new LatencyFilter(originalRequest, latencyMs);
            }
        });

        addHttpFilterFactory(new HttpFiltersSourceAdapter() {
            @Override
            public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                return new UnregisterRequestFilter(originalRequest, ctx, activityMonitor);
            }
        });
!!!222722.java!!!	getMaximumRequestBufferSize() : int
        int maxBufferSize = 0;
        for (HttpFiltersSource source : filterFactories) {
            int requestBufferSize = source.getMaximumRequestBufferSizeInBytes();
            if (requestBufferSize > maxBufferSize) {
                maxBufferSize = requestBufferSize;
            }
        }

        return maxBufferSize;
!!!222850.java!!!	getMaximumResponseBufferSize() : int
        int maxBufferSize = 0;
        for (HttpFiltersSource source : filterFactories) {
            int requestBufferSize = source.getMaximumResponseBufferSizeInBytes();
            if (requestBufferSize > maxBufferSize) {
                maxBufferSize = requestBufferSize;
            }
        }

        return maxBufferSize;
!!!222978.java!!!	addHarCaptureFilter() : void
        if (harCaptureFilterEnabled.compareAndSet(false, true)) {
            // the HAR capture filter is (relatively) expensive, so only enable it when a HAR is being captured. furthermore,
            // restricting the HAR capture filter to requests where the HAR exists, as well as  excluding HTTP CONNECTs
            // from the HAR capture filter, greatly simplifies the filter code.
            addHttpFilterFactory(new HttpFiltersSourceAdapter() {
                @Override
                public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                    Har har = getHar();
                    if (har != null && !ProxyUtils.isCONNECT(originalRequest)) {
                        return new HarCaptureFilter(originalRequest, ctx, har, getCurrentHarPage() == null ? null : getCurrentHarPage().getId(), getHarCaptureTypes());
                    } else {
                        return null;
                    }
                }
            });

            // HTTP CONNECTs are a special case, since they require special timing and error handling
            addHttpFilterFactory(new HttpFiltersSourceAdapter() {
                @Override
                public HttpFilters filterRequest(HttpRequest originalRequest, ChannelHandlerContext ctx) {
                    Har har = getHar();
                    if (har != null && ProxyUtils.isCONNECT(originalRequest)) {
                        return new HttpConnectHarCaptureFilter(originalRequest, ctx, har, getCurrentHarPage() == null ? null : getCurrentHarPage().getId());
                    } else {
                        return null;
                    }
                }
            });
        }
