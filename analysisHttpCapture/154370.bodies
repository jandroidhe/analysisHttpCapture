class KeyStoreCertificateSource
!!!276482.java!!!	KeyStoreCertificateSource(inout keyStore : KeyStore, in privateKeyAlias : String, in keyStorePassword : String)
        if (keyStore == null) {
            throw new IllegalArgumentException("KeyStore cannot be null");
        }

        if (privateKeyAlias == null) {
            throw new IllegalArgumentException("Private key alias cannot be null");
        }

        if (keyStorePassword == null) {
            throw new IllegalArgumentException("KeyStore password cannot be null");
        }

        this.keyStore = keyStore;
        this.keyStorePassword = keyStorePassword;
        this.privateKeyAlias = privateKeyAlias;
!!!276610.java!!!	load() : CertificateAndKey
        try {
            KeyStore.Entry entry;
            try {
                entry = keyStore.getEntry(privateKeyAlias, new KeyStore.PasswordProtection(keyStorePassword.toCharArray()));
            } catch (UnrecoverableEntryException e) {
                throw new CertificateSourceException("Unable to load private key with alias " + privateKeyAlias + " from KeyStore. Verify the KeyStore password is correct.", e);
            }

            if (entry == null) {
                throw new CertificateSourceException("Unable to find entry in keystore with alias: " + privateKeyAlias);
            }

            if (!(entry instanceof KeyStore.PrivateKeyEntry)) {
                throw new CertificateSourceException("Entry in KeyStore with alias " + privateKeyAlias + " did not contain a private key entry");
            }

            KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) entry;

            PrivateKey privateKey = privateKeyEntry.getPrivateKey();

            if (!(privateKeyEntry.getCertificate() instanceof X509Certificate)) {
                throw new CertificateSourceException("Certificate for private key in KeyStore was not an X509Certificate. Private key alias: " + privateKeyAlias
                        + ". Certificate type: " + (privateKeyEntry.getCertificate() != null ? privateKeyEntry.getCertificate().getClass().getName() : null));
            }

            X509Certificate x509Certificate = (X509Certificate) privateKeyEntry.getCertificate();

            return new CertificateAndKey(x509Certificate, privateKey);
        } catch (KeyStoreException | NoSuchAlgorithmException e) {
            throw new CertificateSourceException("Error accessing keyStore", e);
        }
