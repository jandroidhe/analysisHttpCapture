class CertificateSniffingMitmManager
!!!322050.java!!!	CertificateSniffingMitmManager()
        this(new Authority());
!!!322178.java!!!	CertificateSniffingMitmManager(inout authority : Authority)
        try {
            sslEngineSource = new BouncyCastleSslEngineSource(authority, true,
                    true);
        } catch (final Exception e) {
            throw new RootCertificateException(
                    "Errors during assembling root CA.", e);
        }
!!!322306.java!!!	serverSslEngine(in peerHost : String, in peerPort : int) : SSLEngine
        return sslEngineSource.newSslEngine(peerHost, peerPort);
!!!322434.java!!!	serverSslEngine() : SSLEngine
        return sslEngineSource.newSslEngine();
!!!322562.java!!!	clientSslEngineFor(inout httpRequest : HttpRequest, inout serverSslSession : SSLSession) : SSLEngine
        try {
            X509Certificate upstreamCert = getCertificateFromSession(serverSslSession);
            // TODO store the upstream cert by commonName to review it later

            // A reasons to not use the common name and the alternative names
            // from upstream certificate from serverSslSession to create the
            // dynamic certificate:
            //
            // It's not necessary. The host name is accepted by the browser.
            //
            String commonName = getCommonName(upstreamCert);

            SubjectAlternativeNameHolder san = new SubjectAlternativeNameHolder();

            san.addAll(upstreamCert.getSubjectAlternativeNames());

            LOG.debug("Subject Alternative Names: {}", san);
            return sslEngineSource.createCertForHost(commonName, san);

        } catch (Exception e) {
            throw new FakeCertificateException(
                    "Creation dynamic certificate failed", e);
        }
!!!322690.java!!!	getCertificateFromSession(inout sslSession : SSLSession) : X509Certificate
        Certificate[] peerCerts = sslSession.getPeerCertificates();
        Certificate peerCert = peerCerts[0];
        if (peerCert instanceof X509Certificate) {
            return (X509Certificate) peerCert;
        }
        throw new IllegalStateException(
                "Required java.security.cert.X509Certificate, found: "
                        + peerCert);
!!!322818.java!!!	getCommonName(inout c : X509Certificate) : String
        LOG.debug("Subject DN principal name: {}", c.getSubjectDN().getName());
        for (String each : c.getSubjectDN().getName().split(",\\s*")) {
            if (each.startsWith("CN=")) {
                String result = each.substring(3);
                LOG.debug("Common Name: {}", result);
                return result;
            }
        }
        throw new IllegalStateException("Missed CN in Subject DN: "
                + c.getSubjectDN());
