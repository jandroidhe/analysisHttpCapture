class LDNetSocket
!!!195842.java!!!	LDNetSocket()
  
!!!195970.java!!!	getInstance() : LDNetSocket
	  if(instance==null){
		  instance=new LDNetSocket();
	  }
	  return instance;
!!!196098.java!!!	initListener(inout listener : LDNetSocket::LDNetSocketListener) : void
	  this.listener=listener;
!!!196226.java!!!	exec(in host : String) : boolean
    if (isCConn && loaded) {
    	try{
    		startJNITelnet(host, "80"); //默认80端口
    		return true;
    	}catch(UnsatisfiedLinkError e){
    		e.printStackTrace();
    		Log.i("LDNetSocket", "call jni failed, call execUseJava");
    		return execUseJava(host);
    	}	
    } else {
      return execUseJava(host);
    }
!!!196354.java!!!	execUseJava(in host : String) : boolean
    if (_remoteInet != null && _remoteIpList != null) {
      int len = _remoteInet.length;
      isConnnected = new boolean[len];
      for (int i = 0; i < len; i++) {
        if (i != 0) {
          this.listener.OnNetSocketUpdated("\n");
        }
        isConnnected[i] = execIP(_remoteInet[i], _remoteIpList.get(i));
      }
      for (Boolean i : isConnnected) {
        if (i == true) {// 一个连接成功即认为成功
          this.listener.OnNetSocketFinished("\n");
          return true;
        }
      }

    } else {
      this.listener.OnNetSocketFinished(HOSTERR);
    }
    this.listener.OnNetSocketFinished("\n");
    return false;
!!!196482.java!!!	execIP(inout inetAddress : InetAddress, in ip : String) : boolean
    boolean isConnected = true;
    StringBuilder log = new StringBuilder();
    InetSocketAddress socketAddress = null;
    if (inetAddress != null && ip != null) {
      socketAddress = new InetSocketAddress(inetAddress, PORT);
      int flag = 0;
      this.listener.OnNetSocketUpdated("Connect to host: " + ip + "..." + "\n");
      for (int i = 0; i < CONN_TIMES; i++) {
        execSocket(socketAddress, timeOut, i);
        if (RttTimes[i] == -1) {// 一旦发生timeOut,则尝试加长连接时间
          this.listener.OnNetSocketUpdated((i + 1) + "'s time=" + "TimeOut"
              + ",  ");
          timeOut += 4000;
          if (i > 0 && RttTimes[i - 1] == -1) {// 连续两次连接超时,停止后续测试
            flag = -1;
            break;
          }
        } else if (RttTimes[i] == -2) {
          this.listener
              .OnNetSocketUpdated((i + 1) + "'s time=" + "IOException");
          if (i > 0 && RttTimes[i - 1] == -2) {// 连续两次出现IO异常,停止后续测试
            flag = -2;
            break;
          }
        } else {
          this.listener.OnNetSocketUpdated((i + 1) + "'s time=" + RttTimes[i]
              + "ms,  ");
        }
      }
      long time = 0;
      int count = 0;
      if (flag == -1) {
        // log.append(TIMEOUT);
        isConnected = false;
      } else if (flag == -2) {
        // log.append(IOERR);
        isConnected = false;
      } else {
        for (int i = 0; i < CONN_TIMES; i++) {
          if (RttTimes[i] > 0) {
            time += RttTimes[i];
            count++;
          }
        }
        if (count > 0) {
          time = time / count;
          log.append("average=" + time + "ms");
        }
      }
    } else {
      isConnected = false;
    }
    this.listener.OnNetSocketUpdated(log.toString());
    return isConnected;
!!!196610.java!!!	execSocket(inout socketAddress : InetSocketAddress, in timeOut : int, in index : int) : void
    Socket socket = null;
    long start = 0;
    long end = 0;
    try {
      socket = new Socket();
      start = System.currentTimeMillis();
      socket.connect(socketAddress, timeOut);
      end = System.currentTimeMillis();
      RttTimes[index] = end - start;
    } catch (SocketTimeoutException e) {
      RttTimes[index] = -1;// 作为TIMEOUT标识
      e.printStackTrace();
    } catch (IOException e) {
      RttTimes[index] = -2;// 作为IO异常标识
      e.printStackTrace();
    } finally {
      if (socket != null) {
        try {
          socket.close();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    }
!!!196738.java!!!	resetInstance() : void
    if (instance != null) {
      instance = null;
    }
!!!196994.java!!!	printSocketInfo(in log : String) : void
	  listener.OnNetSocketUpdated(log);
