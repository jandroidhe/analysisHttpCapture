class LDNetTraceRoute
!!!193794.java!!!	getInstance() : LDNetTraceRoute
    if (instance == null) {
      instance = new LDNetTraceRoute();
    }
    return instance;
!!!193922.java!!!	initListenter(inout listener : LDNetTraceRoute::LDNetTraceRouteListener) : void
    this.listener = listener;
!!!194306.java!!!	startTraceRoute(in host : String) : void
    if (isCTrace && loaded) {
      try {
        startJNICTraceRoute(host);
      } catch (UnsatisfiedLinkError e) {
        e.printStackTrace();
        // 如果c调用失败改调JAVA代码
        Log.i("LDNetTraceRoute", "调用java模拟traceRoute");
        TraceTask trace = new TraceTask(host, 1);
        execTrace(trace);
      }
    } else {
      TraceTask trace = new TraceTask(host, 1);
      execTrace(trace);
    }
!!!194434.java!!!	resetInstance() : void
    if (instance != null) {
      instance = null;
    }
!!!194690.java!!!	printTraceInfo(in log : String) : void
    // Log.i(LOG_TAG, log);
    listener.OnNetTraceUpdated(log);
!!!194818.java!!!	execPing(inout ping : LDNetTraceRoute::PingTask) : String
    Process process = null;
    String str = "";
    BufferedReader reader = null;
    try {
      process = Runtime.getRuntime().exec("ping -c 1 " + ping.getHost());
      reader = new BufferedReader(new InputStreamReader(
          process.getInputStream()));
      String line = null;
      while ((line = reader.readLine()) != null) {
        str += line;
      }
      reader.close();
      process.waitFor();

    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        process.destroy();
      } catch (Exception e) {
      }
    }
    return str;
!!!194946.java!!!	execTrace(inout trace : LDNetTraceRoute::TraceTask) : void
    Pattern patternTrace = Pattern.compile(MATCH_TRACE_IP);
    Pattern patternIp = Pattern.compile(MATCH_PING_IP);
    Pattern patternTime = Pattern.compile(MATCH_PING_TIME);

    Process process = null;
    BufferedReader reader = null;
    boolean finish = false;
    try {
      // 通过ping的跳数控制，取得相应跳输的ip地址，然后再次执行ping命令读取时间
      while (!finish && trace.getHop() < 30) {
        // 先发出ping命令获得某个跳数的ip地址
        String str = "";
        // -c 1 同时发送消息次数 －t是指跳数
        String command = "ping -c 1 -t " + trace.getHop() + " "
            + trace.getHost();

        process = Runtime.getRuntime().exec(command);
        reader = new BufferedReader(new InputStreamReader(
            process.getInputStream()));
        String line = null;
        while ((line = reader.readLine()) != null) {
          str += line;
        }
        reader.close();
        process.waitFor();

        Matcher m = patternTrace.matcher(str);

        // 如果成功获得trace:IP，则再次发送ping命令获取ping的时间
        StringBuilder log = new StringBuilder(256);
        if (m.find()) {
          String pingIp = m.group();
          PingTask pingTask = new PingTask(pingIp);

          String status = execPing(pingTask);
          if (status.length() == 0) {
            log.append("unknown host or network error\n");
            finish = true;
          } else {
            Matcher matcherTime = patternTime.matcher(status);
            if (matcherTime.find()) {
              String time = matcherTime.group();
              log.append(trace.getHop());
              log.append("\t\t");
              log.append(pingIp);
              log.append("\t\t");
              log.append(time);
              log.append("\t");
            } else {
              log.append(trace.getHop());
              log.append("\t\t");
              log.append(pingIp);
              log.append("\t\t timeout \t");
            }
            listener.OnNetTraceUpdated(log.toString());
            trace.setHop(trace.getHop() + 1);
          }

        }

        // 否则：what
        else {
          Matcher matchPingIp = patternIp.matcher(str);
          if (matchPingIp.find()) {
            String pingIp = matchPingIp.group();
            Matcher matcherTime = patternTime.matcher(str);
            if (matcherTime.find()) {
              String time = matcherTime.group();
              log.append(trace.getHop());
              log.append("\t\t");
              log.append(pingIp);
              log.append("\t\t");
              log.append(time);
              log.append("\t");
              listener.OnNetTraceUpdated(log.toString());
            }
            finish = true;
          } else {
            if (str.length() == 0) {
              log.append("unknown host or network error\t");
              finish = true;
            } else {
              log.append(trace.getHop());
              log.append("\t\t timeout \t");
              trace.setHop(trace.getHop() + 1);
            }
            listener.OnNetTraceUpdated(log.toString());
          }
        }// else no match traceIPPattern
      }// while
    } catch (IOException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    } finally {
      try {
        if (reader != null) {
          reader.close();
        }
        process.destroy();
      } catch (Exception e) {
      }
    }

    listener.OnNetTraceFinished();
