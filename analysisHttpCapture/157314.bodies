class BouncyCastleSecurityProviderTool
!!!292226.java!!!	createServerCertificate(inout certificateInfo : CertificateInfo, inout caRootCertificate : X509Certificate, inout caPrivateKey : PrivateKey, inout serverKeyPair : KeyPair, in messageDigest : String) : CertificateAndKey
        // make sure certificateInfo contains all fields necessary to generate the certificate
        if (certificateInfo.getCommonName() == null) {
            throw new IllegalArgumentException("Must specify CN for server certificate");
        }

        if (certificateInfo.getNotBefore() == null) {
            throw new IllegalArgumentException("Must specify Not Before for server certificate");
        }

        if (certificateInfo.getNotAfter() == null) {
            throw new IllegalArgumentException("Must specify Not After for server certificate");
        }

        // create the subject for the new server certificate. when impersonating an upstream server, this should contain
        // the hostname of the server we are trying to impersonate in the CN field
        X500Name serverCertificateSubject = createX500NameForCertificate(certificateInfo);

        // get the algorithm that will be used to sign the new certificate, which is a combination of the message digest
        // and the digital signature from the CA's private key
        String signatureAlgorithm = EncryptionUtil.getSignatureAlgorithm(messageDigest, caPrivateKey);

        // get a ContentSigner with our CA private key that will be used to sign the new server certificate
        ContentSigner signer = getCertificateSigner(caPrivateKey, signatureAlgorithm);

        // generate a serial number for the new certificate. serial numbers only need to be unique within our
        // certification authority; a large random integer will satisfy that requirement.
        BigInteger serialNumber = EncryptionUtil.getRandomBigInteger(CERTIFICATE_SERIAL_NUMBER_SIZE);

        // create the X509Certificate using Bouncy Castle. the BC X509CertificateHolder can be converted to a JCA X509Certificate.
        X509CertificateHolder certificateHolder;
        try {
            certificateHolder = new JcaX509v3CertificateBuilder(caRootCertificate,
                    serialNumber,
                    certificateInfo.getNotBefore(),
                    certificateInfo.getNotAfter(),
                    serverCertificateSubject,
                    serverKeyPair.getPublic())
                    .addExtension(Extension.subjectAlternativeName, false, getDomainNameSANsAsASN1Encodable(certificateInfo.getSubjectAlternativeNames()))
                    .addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyIdentifier(serverKeyPair.getPublic()))
                    .addExtension(Extension.basicConstraints, false, new BasicConstraints(false))
                    .build(signer);
        } catch (CertIOException e) {
            throw new CertificateCreationException("Error creating new server certificate", e);
        }

        // convert the Bouncy Castle certificate holder into a JCA X509Certificate
        X509Certificate serverCertificate = convertToJcaCertificate(certificateHolder);

        return new CertificateAndKey(serverCertificate, serverKeyPair.getPrivate());
!!!292354.java!!!	createServerKeyStore(in keyStoreType : String, inout serverCertificateAndKey : CertificateAndKey, inout rootCertificate : X509Certificate, in privateKeyAlias : String, in password : String) : KeyStore
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
!!!292482.java!!!	createRootCertificateKeyStore(in keyStoreType : String, inout rootCertificateAndKey : CertificateAndKey, in privateKeyAlias : String, in password : String) : KeyStore
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
!!!292610.java!!!	createCARootCertificate(inout certificateInfo : CertificateInfo, inout keyPair : KeyPair, in messageDigest : String) : CertificateAndKey
        if (certificateInfo.getNotBefore() == null) {
            throw new IllegalArgumentException("Must specify Not Before for server certificate");
        }

        if (certificateInfo.getNotAfter() == null) {
            throw new IllegalArgumentException("Must specify Not After for server certificate");
        }

        // create the X500Name that will be both the issuer and the subject of the new root certificate
        X500Name issuer = createX500NameForCertificate(certificateInfo);

        BigInteger serial = EncryptionUtil.getRandomBigInteger(CERTIFICATE_SERIAL_NUMBER_SIZE);

        PublicKey rootCertificatePublicKey = keyPair.getPublic();

        String signatureAlgorithm = EncryptionUtil.getSignatureAlgorithm(messageDigest, keyPair.getPrivate());

        // this is a CA root certificate, so it is self-signed
        ContentSigner selfSigner = getCertificateSigner(keyPair.getPrivate(), signatureAlgorithm);

        ASN1EncodableVector extendedKeyUsages = new ASN1EncodableVector();
        extendedKeyUsages.add(KeyPurposeId.id_kp_serverAuth);
        extendedKeyUsages.add(KeyPurposeId.id_kp_clientAuth);
        extendedKeyUsages.add(KeyPurposeId.anyExtendedKeyUsage);

        X509CertificateHolder certificateHolder;
        try {
            certificateHolder = new JcaX509v3CertificateBuilder(
                    issuer,
                    serial,
                    certificateInfo.getNotBefore(),
                    certificateInfo.getNotAfter(),
                    issuer,
                    rootCertificatePublicKey)
                    .addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyIdentifier(rootCertificatePublicKey))
                    .addExtension(Extension.basicConstraints, true, new BasicConstraints(true))
                    .addExtension(Extension.keyUsage, false, new KeyUsage(
                            KeyUsage.keyCertSign
                                    | KeyUsage.digitalSignature
                                    | KeyUsage.keyEncipherment
                                    | KeyUsage.dataEncipherment
                                    | KeyUsage.cRLSign))
                    .addExtension(Extension.extendedKeyUsage, false, new DERSequence(extendedKeyUsages))
                    .build(selfSigner);
        } catch (CertIOException e) {
            throw new CertificateCreationException("Error creating root certificate", e);
        }

        // convert the Bouncy Castle X590CertificateHolder to a JCA cert
        X509Certificate cert = convertToJcaCertificate(certificateHolder);

        return new CertificateAndKey(cert, keyPair.getPrivate());
!!!292738.java!!!	encodePrivateKeyAsPem(inout privateKey : PrivateKey, in passwordForPrivateKey : String, in encryptionAlgorithm : String) : String
        if (passwordForPrivateKey == null) {
            throw new IllegalArgumentException("You must specify a password when serializing a private key");
        }

        PEMEncryptor encryptor = new JcePEMEncryptorBuilder(encryptionAlgorithm)
                .build(passwordForPrivateKey.toCharArray());

        return encodeObjectAsPemString(privateKey, encryptor);
!!!292866.java!!!	encodeCertificateAsPem(inout certificate : Certificate) : String
        return encodeObjectAsPemString(certificate, null);
!!!292994.java!!!	decodePemEncodedPrivateKey(inout privateKeyReader : Reader, in password : String) : PrivateKey
        try (PEMParser pemParser = new PEMParser(privateKeyReader)) {
            Object keyPair = pemParser.readObject();

            // retrieve the PrivateKeyInfo from the returned keyPair object. if the key is encrypted, it needs to be
            // decrypted using the specified password first.
            PrivateKeyInfo keyInfo;
            if (keyPair instanceof PEMEncryptedKeyPair) {
                if (password == null) {
                    throw new ImportException("Unable to import private key. Key is encrypted, but no password was provided.");
                }

                PEMDecryptorProvider decryptor = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());

                PEMKeyPair decryptedKeyPair = ((PEMEncryptedKeyPair) keyPair).decryptKeyPair(decryptor);

                keyInfo = decryptedKeyPair.getPrivateKeyInfo();
            } else {
                keyInfo = ((PEMKeyPair) keyPair).getPrivateKeyInfo();
            }

            return new JcaPEMKeyConverter().getPrivateKey(keyInfo);
        } catch (IOException e) {
            throw new ImportException("Unable to read PEM-encoded PrivateKey", e);
        }
!!!293122.java!!!	decodePemEncodedCertificate(inout certificateReader : Reader) : X509Certificate
        // JCA provides this functionality already, but it can be easily implemented using BC as well
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
!!!293250.java!!!	loadKeyStore(inout file : File, in keyStoreType : String, in password : String) : KeyStore
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
!!!293378.java!!!	saveKeyStore(inout file : File, inout keyStore : KeyStore, in keystorePassword : String) : void
        throw new UnsupportedOperationException("BouncyCastle implementation does not implement this method");
!!!293506.java!!!	getKeyManagers(inout keyStore : KeyStore, in keyStorePassword : String) : KeyManager
        return new KeyManager[0];
!!!293634.java!!!	createX500NameForCertificate(inout certificateInfo : CertificateInfo) : X500Name
        X500NameBuilder x500NameBuilder = new X500NameBuilder(BCStyle.INSTANCE);

        if (certificateInfo.getCommonName() != null) {
            x500NameBuilder.addRDN(BCStyle.CN, certificateInfo.getCommonName());
        }

        if (certificateInfo.getOrganization() != null) {
            x500NameBuilder.addRDN(BCStyle.O, certificateInfo.getOrganization());
        }

        if (certificateInfo.getOrganizationalUnit() != null) {
            x500NameBuilder.addRDN(BCStyle.OU, certificateInfo.getOrganizationalUnit());
        }

        if (certificateInfo.getEmail() != null) {
            x500NameBuilder.addRDN(BCStyle.E, certificateInfo.getEmail());
        }

        if (certificateInfo.getLocality() != null) {
            x500NameBuilder.addRDN(BCStyle.L, certificateInfo.getLocality());
        }

        if (certificateInfo.getState() != null) {
            x500NameBuilder.addRDN(BCStyle.ST, certificateInfo.getState());
        }

        if (certificateInfo.getCountryCode() != null) {
            x500NameBuilder.addRDN(BCStyle.C, certificateInfo.getCountryCode());
        }

        // TODO: Add more X.509 certificate fields as needed

        return x500NameBuilder.build();
!!!293762.java!!!	getDomainNameSANsAsASN1Encodable(inout subjectAlternativeNames : List<String>) : GeneralNames
        List<GeneralName> encodedSANs = new ArrayList<>(subjectAlternativeNames.size());
        for (String subjectAlternativeName : subjectAlternativeNames) {
            // IP addresses use the IP Address tag instead of the DNS Name tag in the SAN list
            boolean isIpAddress = InetAddresses.isInetAddress(subjectAlternativeName);
            GeneralName generalName = new GeneralName(isIpAddress ? GeneralName.iPAddress : GeneralName.dNSName, subjectAlternativeName);
            encodedSANs.add(generalName);
        }

        return new GeneralNames(encodedSANs.toArray(new GeneralName[encodedSANs.size()]));
!!!293890.java!!!	getCertificateSigner(inout certAuthorityPrivateKey : PrivateKey, in signatureAlgorithm : String) : ContentSigner
        try {
            return new JcaContentSignerBuilder(signatureAlgorithm)
                    .build(certAuthorityPrivateKey);
        } catch (OperatorCreationException e) {
            throw new CertificateCreationException("Unable to create ContentSigner using signature algorithm: " + signatureAlgorithm, e);
        }
!!!294018.java!!!	convertToJcaCertificate(inout bouncyCastleCertificate : X509CertificateHolder) : X509Certificate
        try {
            return new JcaX509CertificateConverter()
                    .getCertificate(bouncyCastleCertificate);
        } catch (CertificateException e) {
            throw new CertificateCreationException("Unable to convert X590CertificateHolder to JCA X590Certificate", e);
        }
!!!294146.java!!!	createSubjectKeyIdentifier(inout key : Key) : SubjectKeyIdentifier
        SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfo.getInstance(key.getEncoded());

        return new BcX509ExtensionUtils().createSubjectKeyIdentifier(publicKeyInfo);
!!!294274.java!!!	encodeObjectAsPemString(inout object : Object, inout encryptor : PEMEncryptor) : String
        StringWriter stringWriter = new StringWriter();

        try (JcaPEMWriter pemWriter = new JcaPEMWriter(stringWriter)) {
            pemWriter.writeObject(object, encryptor);
            pemWriter.flush();
        } catch (IOException e) {
            throw new ExportException("Unable to generate PEM string representing object", e);
        }

        return stringWriter.toString();
