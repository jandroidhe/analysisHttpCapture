class PreviewAdapter
!!!146434.java!!!	onCreateViewHolder(inout parent : ViewGroup, in viewType : int) : PreviewFragment::PreviewAdapter::MyViewHolder
            return new MyViewHolder(LayoutInflater.from(getContext()).inflate(R.layout.item_preview, parent, false));
!!!146562.java!!!	onBindViewHolder(inout holder : PreviewFragment::PreviewAdapter::MyViewHolder, in position : int) : void
            HarEntry harEntry = harEntryList.get(position);
            holder.rootView.setOnClickListener(new ClickListner(harEntry));
            holder.tv.setText(harEntry.getRequest().getUrl());
            if(harEntry.getResponse().getStatus()>400){
                holder.iconView.setImageDrawable(getResources().getDrawable(R.drawable.ic_error_black_24dp));
            }else if(harEntry.getResponse().getStatus()>300){
                holder.iconView.setImageDrawable(getResources().getDrawable(R.drawable.ic_directions_black_24dp));
            }else if(harEntry.getResponse().getContent().getMimeType().contains("image")) {
                holder.iconView.setImageDrawable(getResources().getDrawable(R.drawable.ic_photo_black_24dp));
            }else{
                holder.iconView.setImageDrawable(getResources().getDrawable(R.drawable.ic_description_black_24dp));
            }
            holder.detailTextView.setText("Status:" + harEntry.getResponse().getStatus() +
                    " Size:" + harEntry.getResponse().getBodySize() +
                    "Bytes Time:" + harEntry.getTime() + "ms");
!!!146690.java!!!	getItemCount() : int
            return harEntryList.size();
!!!146946.java!!!	getFilter() : Filter
            return new Filter() {
                @Override
                protected FilterResults performFiltering(CharSequence constraint) {
                    harLog = ((MainActivity) getActivity()).getFiltedHar().getLog();
                    //初始化过滤结果对象
                    FilterResults results = new FilterResults();
                    //假如搜索为空的时候，将复制的数据添加到原始数据，用于继续过滤操作
                    if (results.values == null) {
                        harEntryList.clear();
                        harEntryList.addAll(harLog.getEntries());
                    }
                    //关键字为空的时候，搜索结果为复制的结果
                    if (constraint == null || constraint.length() == 0) {
                        results.values = harLog.getEntries();
                        results.count = harLog.getEntries().size();
                    } else {
                        String prefixString = constraint.toString();
                        final int count = harEntryList.size();
                        //用于存放暂时的过滤结果
                        final ArrayList<HarEntry> newValues = new ArrayList<>();
                        for (int i = 0; i < count; i++) {
                            final HarEntry value = harEntryList.get(i);
                            String url = value.getRequest().getUrl();
                            // 假如含有关键字的时候，添加
                            if (url.contains(prefixString)) {
                                newValues.add(value);
                            } else {
                                //过来空字符开头
                                String[] words = prefixString.split(" ");

                                for (String word : words) {
                                    if (url.contains(word)) {
                                        newValues.add(value);
                                        break;
                                    }
                                }
                            }
                        }
                        results.values = newValues;
                        results.count = newValues.size();
                    }
                    return results;//过滤结果
                }

                @Override
                protected void publishResults(CharSequence constraint, FilterResults results) {
                    harEntryList.clear();//清除原始数据
                    if(results.values instanceof List){
                        harEntryList.addAll((List<HarEntry>) results.values);//将过滤结果添加到这个对象
                    }
                    if (results.count > 0) {
                        previewAdapter.notifyDataSetChanged();//有关键字的时候刷新数据
                    } else {
                        //关键字不为零但是过滤结果为空刷新数据
                        if (constraint.length() != 0) {
                            previewAdapter.notifyDataSetChanged();
                            return;
                        }
                        //加载复制的数据，即为最初的数据
                        harEntryList.addAll(harLog.getEntries());
                        previewAdapter.notifyDataSetChanged();
                    }
                }
            };
