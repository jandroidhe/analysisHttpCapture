class CameraConfigurationManager
!!!179074.java!!!	CameraConfigurationManager(inout context : Context)
        this.context = context;
!!!179202.java!!!	initFromCameraParameters(inout camera : Camera) : void
        Camera.Parameters parameters = camera.getParameters();
        WindowManager manager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = manager.getDefaultDisplay();
        Point theScreenResolution = new Point();
        display.getSize(theScreenResolution);
        screenResolution = theScreenResolution;
        Log.i(TAG, "Screen resolution: " + screenResolution);
        Point screenResolutionForCamera = new Point();
        screenResolutionForCamera.x = screenResolution.x;
        screenResolutionForCamera.y = screenResolution.y;
        if (screenResolution.x < screenResolution.y) {
            screenResolutionForCamera.x = screenResolution.y;
            screenResolutionForCamera.y = screenResolution.x;
        }
        cameraResolution = CameraConfigurationUtils.findBestPreviewSizeValue(parameters, screenResolutionForCamera);
        //cameraResolution = CameraConfigurationUtils.findBestPreviewSizeValue(parameters, screenResolution);
        Log.i(TAG, "Camera resolution: " + cameraResolution);
!!!179330.java!!!	setDesiredCameraParameters(inout camera : Camera, inout safeMode : boolean) : void
        Camera.Parameters parameters = camera.getParameters();

        if (parameters == null) {
            Log.w(TAG, "Device error: no camera parameters are available. Proceeding without configuration.");
            return;
        }

        Log.i(TAG, "Initial camera parameters: " + parameters.flatten());

        if (safeMode) {
            Log.w(TAG, "In camera config safe mode -- most settings will not be honored");
        }

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);

        initializeTorch(parameters, prefs, safeMode);

        CameraConfigurationUtils.setFocus(
                parameters,
                true, //prefs.getBoolean(PreferencesActivity.KEY_AUTO_FOCUS, true),
                true, //prefs.getBoolean(PreferencesActivity.KEY_DISABLE_CONTINUOUS_FOCUS, true),
                safeMode);

        if (!safeMode) {
            if (false /*prefs.getBoolean(PreferencesActivity.KEY_INVERT_SCAN, false)*/) {
                CameraConfigurationUtils.setInvertColor(parameters);
            }

            if (!true /*prefs.getBoolean(PreferencesActivity.KEY_DISABLE_BARCODE_SCENE_MODE, true)*/) {
                CameraConfigurationUtils.setBarcodeSceneMode(parameters);
            }

            if (!true /*prefs.getBoolean(PreferencesActivity.KEY_DISABLE_METERING, true)*/) {
                CameraConfigurationUtils.setVideoStabilization(parameters);
                CameraConfigurationUtils.setFocusArea(parameters);
                CameraConfigurationUtils.setMetering(parameters);
            }

        }

        parameters.setPreviewSize(cameraResolution.x, cameraResolution.y);
        camera.setParameters(parameters);

        Camera.Parameters afterParameters = camera.getParameters();
        Camera.Size afterSize = afterParameters.getPreviewSize();
        if (afterSize != null && (cameraResolution.x != afterSize.width || cameraResolution.y != afterSize.height)) {
            Log.w(TAG, "Camera said it supported preview size " + cameraResolution.x + 'x' + cameraResolution.y +
                    ", but after setting it, preview size is " + afterSize.width + 'x' + afterSize.height);
            cameraResolution.x = afterSize.width;
            cameraResolution.y = afterSize.height;
        }

        camera.setDisplayOrientation(90);
!!!179458.java!!!	getCameraResolution() : Point
        return cameraResolution;
!!!179586.java!!!	getScreenResolution() : Point
        return screenResolution;
!!!179714.java!!!	getTorchState(inout camera : Camera) : boolean
        if (camera != null) {
            Camera.Parameters parameters = camera.getParameters();
            if (parameters != null) {
                String flashMode = camera.getParameters().getFlashMode();
                return flashMode != null &&
                        (Camera.Parameters.FLASH_MODE_ON.equals(flashMode) ||
                                Camera.Parameters.FLASH_MODE_TORCH.equals(flashMode));
            }
        }
        return false;
!!!179842.java!!!	setTorch(inout camera : Camera, inout newSetting : boolean) : void
        Camera.Parameters parameters = camera.getParameters();
        doSetTorch(parameters, newSetting, false);
        camera.setParameters(parameters);
!!!179970.java!!!	initializeTorch(inout parameters : Camera.Parameters, inout prefs : SharedPreferences, inout safeMode : boolean) : void
        boolean currentSetting = FrontLightMode.readPref(prefs) == FrontLightMode.ON;
        doSetTorch(parameters, currentSetting, safeMode);
!!!180098.java!!!	doSetTorch(inout parameters : Camera.Parameters, inout newSetting : boolean, inout safeMode : boolean) : void
        CameraConfigurationUtils.setTorch(parameters, newSetting);
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        if (!safeMode && !true /*prefs.getBoolean(PreferencesActivity.KEY_DISABLE_EXPOSURE, true)*/) {
            CameraConfigurationUtils.setBestExposure(parameters, newSetting);
        }
